{"version":3,"sources":["Calculator.js","serviceWorker.js","index.js","App.js"],"names":["Calculator","props","state","number","inputOne","inputTwo","action","answer","clickHandler","bind","clearHandler","actionHandler","equalHandler","reverseHandler","floatHandler","e","item","dummy","this","length","setState","includes","console","log","unreversed","filter","firstInput","join","secondInput","ans","first","second","parseFloat","array","i","push","className","map","key","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.749eac66.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\n\nexport default class Calculator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            number: [],\n            inputOne: \"\",\n            inputTwo: \"\",\n            action: \"\",\n            answer: \"\"\n        };\n        this.clickHandler = this.clickHandler.bind(this);\n        this.clearHandler = this.clearHandler.bind(this);\n        this.actionHandler = this.actionHandler.bind(this);\n        this.equalHandler = this.equalHandler.bind(this);\n        this.reverseHandler = this.reverseHandler.bind(this);\n        this.floatHandler = this.floatHandler.bind(this);\n    }\n\n    clickHandler(e, item) {\n        let dummy = item;\n\n        if (this.state.number[0] == 0 && this.state.number.length == 1) {\n            this.setState({number: [dummy]});\n        } else if (\n            this.state.number.includes(\"-\") &&\n            dummy == 0 &&\n            this.state.number.length == 1\n        ) {\n            console.log('is zero')\n        } else {\n            this.setState({number: [...this.state.number, dummy]});\n        }\n    }\n\n    reverseHandler() {\n\n        if (!this.state.number.includes(\"-\")) {\n            this.setState({\n                number: [...\"-\", ...this.state.number]\n            });\n        } else {\n            let unreversed = this.state.number.filter(item => item != \"-\");\n            this.setState({\n                number: unreversed\n            });\n        }\n    }\n\n    clearHandler() {\n        this.setState({\n            number: [],\n            inputOne: \"\",\n            inputTwo: \"\",\n            action: \"\",\n            answer: \"\"\n        });\n    }\n\n    actionHandler(e, item) {\n        if (this.state.inputOne.length === 0) {\n            let firstInput = this.state.number.join(\"\");\n            this.setState({number: [], inputOne: firstInput, action: item});\n        } else {\n            let secondInput = this.state.number.join(\"\");\n            this.setState({inputTwo: secondInput, action: item});\n        }\n    }\n\n    equalHandler() {\n        let ans = 0;\n        let first = this.state.inputOne;\n        let second = this.state.number.join(\"\");\n        if (this.state.action === \"+\") {\n            ans = parseFloat(first) + parseFloat(second);\n        } else if (this.state.action === \"-\") {\n            ans = parseFloat(first) - parseFloat(second);\n        } else if (this.state.action === \"*\") {\n            ans = parseFloat(first) * parseFloat(second);\n        } else if (this.state.action === \"/\") {\n            if (second != 0) {\n                ans = parseFloat(first) / parseFloat(second);\n            } else {\n                ans = \"It is forbidden to divide by zero!\";\n            }\n        }\n        this.setState({\n            number: [],\n            inputOne: \"\",\n            inputTwo: \"\",\n            action: \"\",\n            answer: ans\n        });\n    }\n\n    floatHandler() {\n        if (this.state.number.length == 0) {\n            this.setState({number: [\"0\", \".\"]});\n        } else if (this.state.number.includes(\".\")) {\n            console.log(\"already is used\");\n        } else {\n            this.setState({number: [...this.state.number, \".\"]});\n        }\n    }\n\n    render() {\n        let array = [];\n        let actions = [\"+\", \"-\", \"*\", \"/\"];\n        for (let i = 0; i <= 9; i++) {\n            array.push(i);\n        }\n\n        return (\n            <div>\n                <h1 className='sector__header'>Calculator</h1>\n\n                <div className=\"sector sector__item\">Your input: {this.state.number}</div>\n                    <div className=\"sector number\">\n                        {array.map(item => {\n                            return (\n                                <p\n                                    className=\"sector__item\"\n                                    key={item}\n                                    onClick={e => this.clickHandler(e, item)}\n                                >\n                                    {item}\n                                </p>\n                            );\n                        })}\n                    </div>\n\n                    <div className=\"sector \">\n                        {actions.map((item, key) => {\n                            return (\n                                <p\n                                    key={key}\n                                    className=\"sector__item clear\"\n                                    onClick={e => this.actionHandler(e, item)}\n                                >\n                                    {item}\n                                </p>\n\n                            );\n                        })}\n                        <div className=\"sector \">\n                            <div className=\"sector__item\" onClick={this.floatHandler}>\n                                ,\n                            </div>\n                            <div className=\"sector__item\" onClick={this.reverseHandler}>\n                                Reverse\n                            </div>\n                            <div className=\"sector__item\" onClick={this.clearHandler}>\n                                Clear\n                            </div>\n                        </div>\n                    </div>\n\n                <div className=\"sector__item answer\" onClick={this.equalHandler}>\n                    And the answer is: <br/><span className='answer__number'>{this.state.answer}</span>\n                </div>\n            </div>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\nimport \"./styles.css\";\nimport Calculator from \"./Calculator\";\n\nexport default function App() {\n  return (\n      <div className=\"App\">\n        <Calculator />\n      </div>\n  );\n}\n"],"sourceRoot":""}